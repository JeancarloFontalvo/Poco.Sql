using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace Poco.Sql
{
    public class PocoSqlMapping<T> : IPocoSqlMapping
    {
        public string SchemeName { get; private set; }
        public string TableName { get; private set; }
        public string PrimaryKey { get; private set; }
        public bool PrimaryKeyAutoGenerated { get; private set; }
        public bool Virtual { get; private set; }

        private Dictionary<string, string> _namedQueries;
        private Dictionary<string, PropertyMap> _mappedProperties;
        private Dictionary<string, object> _mappedRelationships;
        private PocoSqlStoredProceduresMapping _mappedStoredProcedures;
        private PocoSqlCostomMapping _mappedCustomQueries;

        public PocoSqlMapping()
        {
            _mappedProperties = new Dictionary<string, PropertyMap>();
            _mappedRelationships = new Dictionary<string, object>();
            _namedQueries = new Dictionary<string, string>();
            TableName = typeof(T).Name;
        }

        public string GetTableName()
        {
            return (String.IsNullOrEmpty(SchemeName) ? String.Empty : SchemeName + ".") + TableName;
        }

        public PocoSqlMapping<T> HasKey<TKey>(Expression<Func<T, TKey>> keyExpression)
        {
            PrimaryKey = ((MemberExpression)keyExpression.Body).Member.Name;
            return this;
        }

        public PocoSqlMapping<T> AutoGenerated()
        {
            PrimaryKeyAutoGenerated = true;
            return this;
        }

        public PocoSqlMapping<T> ToTable(string tableName)
        {
            return ToTable(tableName, String.Empty);
        }

        public PocoSqlMapping<T> ToTable(string tableName, string schemeName)
        {
            SchemeName = schemeName;
            TableName = tableName;
            return this;
        }

        public PocoSqlMapping<T> IsView()
        {
            return IsVirtual();
        }
        
        public PocoSqlMapping<T> IsVirtual()
        {
            Virtual = true;
            return this;
        }

        public PocoSqlMapping<T> MapToCustomQueries(Action<PocoSqlCostomMapping> customMappings)
        {
            _mappedCustomQueries = new PocoSqlCostomMapping();
            customMappings.Invoke(_mappedCustomQueries);
            return this;
        }

        public PocoSqlMapping<T> MapToStoredProcedures(Action<PocoSqlStoredProceduresMapping> storedProceduresMappings)
        {
            _mappedStoredProcedures = new PocoSqlStoredProceduresMapping();
            storedProceduresMappings.Invoke(_mappedStoredProcedures);
            return this;
        }

        public PropertyMap Property<TProp>(Expression<Func<T, TProp>> propertyExpression)
        {
            string propertyName = ((MemberExpression)propertyExpression.Body).Member.Name;

            PropertyMap propertyMap = null;
            if (_mappedProperties.ContainsKey(propertyName))
                propertyMap = _mappedProperties[propertyName];
            else
                propertyMap = new PropertyMap(propertyName);

            AddMapping(propertyName, propertyMap);

            return propertyMap;
        }

        public void AddMapping(string propertyName, PropertyMap map)
        {
            if (_mappedProperties.ContainsKey(propertyName))
                _mappedProperties[propertyName] = map;
            else
                _mappedProperties.Add(propertyName, map);
        }

        public PropertyMap GetMapping(string propertyName)
        {
            PropertyMap propertyMap = null;
            if (_mappedProperties.ContainsKey(propertyName))
                propertyMap = _mappedProperties[propertyName];

            return propertyMap;
        }

        public RelationshipMap<T, TTarget> HasOptional<TTarget>(Expression<Func<T, TTarget>> navigationPropertyExpression)
        {
            var relationshipMap = new RelationshipMap<T, TTarget>();
            var navigationObjType = navigationPropertyExpression.Body.Type.ToString();

            relationshipMap.RelatedObject = navigationPropertyExpression.Body.Type;
            _mappedRelationships.Add(navigationObjType, relationshipMap);

            return relationshipMap;
        }

        public PocoSqlMapping<T> AddNamedQuery(string name, string sql)
        {
            _namedQueries.Add(name, sql);
            return this;
        }

        public string GetQueryByName(string name)
        {
            return _namedQueries[name];
        }
        
        public IRelationshipMap GetRelationship(string propertyName)
        {
            return (IRelationshipMap)_mappedRelationships[propertyName];
        }
        
        public string GetPrimaryKey()
        {
            return PrimaryKey;
        }

        public bool GetPrimaryAutoGenerated()
        {
            return PrimaryKeyAutoGenerated;
        }
        
        public PocoSqlStoredProceduresMapping GetStoredProceduresMappings()
        {
            return _mappedStoredProcedures;
        }
        
        public PocoSqlCostomMapping GetCustomMappings()
        {
            return _mappedCustomQueries;
        }

        public bool GetIsVirtual()
        {
            return Virtual;
        }
    }
}
